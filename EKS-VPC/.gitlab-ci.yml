#image with terraform capibilities
image:
    name: registry.gitlab.com/gitlab-org/gitlab-build-images:terraform
    entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

    
variables:
  AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
  AWS_SECRET_ACCESS_KEY : ${AWS_SECRET_ACCESS_KEY}
  AWS_DEFAULT_REGION: "us-west-2"
  CLUSTER_NAME: "my_eks_cluster" 

before_script:
  - apk add --no-cache python3 py3-pip bash
  - pip3 install awscli
  - terraform --version    
  - cd EKS-VPC   
  - terraform init 
  - pwd
  - ls -la
  - aws --version  # Confirm awscli is installed and available

stages:
  - validate
  - plan
  - apply
  - destroy

validate:
  stage: validate
  script:
    - terraform validate

plan:
  stage: plan
  script:
    - terraform plan -out="planfile"
    - ls -la
  dependencies:
    - validate #execute when validate stage passed
  artifacts:
    paths:
      - planfile

apply:
  stage: apply
  script:
    - ls -la
    - terraform apply -input=false "planfile" #false to avoid user interaction
    - aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $CLUSTER_NAME --alias $CLUSTER_NAME  # Update kubeconfig to allow kubectl usage
    - export KUBECONFIG=$HOME/.kube/config  # Ensure kubectl uses the right kubeconfig

  dependencies:
    - plan
  when: manual

destroy: 
  stage: destroy
  script:
    - terraform destroy --auto-approve
  when: manual 